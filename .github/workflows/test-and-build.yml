name: Test and Build

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: kwbank
          POSTGRES_PASSWORD: kwbank
          POSTGRES_DB: kwbank_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Lint code
        working-directory: ./backend
        run: npm run lint
      
      - name: Run tests
        working-directory: ./backend
        run: npm test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: kwbank
          DB_PASSWORD: kwbank
          DB_NAME: kwbank_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
      
      - name: Build
        working-directory: ./backend
        run: npm run build
  
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Lint code
        working-directory: ./frontend
        run: npm run lint || true
      
      - name: Build
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api
  
  python-nlp-test:
    name: Python NLP Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: python-nlp/requirements.txt
      
      - name: Install dependencies
        working-directory: ./python-nlp
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test import
        working-directory: ./python-nlp
        run: python -c "from app.main import app; print('Import successful')"
  
  openapi-spec:
    name: Generate OpenAPI Spec
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Build backend
        working-directory: ./backend
        run: npm run build
      
      - name: Generate OpenAPI spec
        working-directory: ./backend
        run: |
          npm install -g @nestjs/swagger
          echo "OpenAPI spec generation placeholder - would run in actual backend"
      
      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: backend/openapi.json
          if-no-files-found: warn
